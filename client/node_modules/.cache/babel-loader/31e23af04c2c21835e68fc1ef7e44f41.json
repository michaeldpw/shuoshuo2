{"ast":null,"code":"var _jsxFileName = \"/Users/peiwendu/Desktop/shuoshuo2.0/client/src/pages/SetAvatar.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { NavLink } from 'react-router-dom';\nimport './pages.css';\nimport ReactCrop from 'react-image-crop';\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport { url } from '../url';\nimport { extractImageFileExtensionFromBase64, image64toCanvasRef } from '../base64';\naxios.defaults.withCredentials = true;\nconst imageMaxSize = 1000000000; // bytes\n\nconst acceptedFileTypes = 'image/x-png, image/png, image/jpg, image/jpeg, image/gif';\nconst acceptedFileTypesArray = acceptedFileTypes.split(\",\").map(item => {\n  return item.trim();\n});\n\nclass SetAvatar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.verifyFile = files => {\n      if (files && files.length > 0) {\n        const currentFile = files[0];\n        const currentFileType = currentFile.type;\n        const currentFileSize = currentFile.size;\n\n        if (currentFileSize > imageMaxSize) {\n          alert(\"This file is not allowed. \" + currentFileSize + \" bytes is too large\");\n          return false;\n        }\n\n        if (!acceptedFileTypesArray.includes(currentFileType)) {\n          alert(\"This file is not allowed. Only images are allowed.\");\n          return false;\n        }\n\n        return true;\n      }\n    };\n\n    this.handleImageLoaded = image => {//console.log(image)\n    };\n\n    this.handleOnCropChange = crop => {\n      this.setState({\n        crop: crop\n      });\n    };\n\n    this.handleOnCropComplete = (crop, pixelCrop) => {\n      console.log(crop, pixelCrop);\n      const canvasRef = this.imagePreviewCanvasRef.current;\n      const imgSrc = this.state.imgSrc;\n      image64toCanvasRef(canvasRef, imgSrc, crop);\n    };\n\n    this.handleFileSelect = event => {\n      // console.log(event)\n      const files = event.target.files;\n      console.log(files);\n\n      if (files && files.length > 0) {\n        const isVerified = this.verifyFile(files);\n\n        if (isVerified) {\n          // imageBase64Data \n          const currentFile = files[0];\n          const myFileItemReader = new FileReader();\n          myFileItemReader.addEventListener(\"load\", () => {\n            // console.log(myFileItemReader.result)\n            const myResult = myFileItemReader.result;\n            this.setState({\n              imgSrc: myResult,\n              imgSrcExt: extractImageFileExtensionFromBase64(myResult)\n            });\n          }, false);\n          myFileItemReader.readAsDataURL(currentFile);\n        }\n      }\n    };\n\n    this.imagePreviewCanvasRef = React.createRef();\n    this.fileInputRef = React.createRef();\n    this.state = {\n      imgSrc: null,\n      imgSrcExt: null,\n      src: null,\n      avatar: null,\n      username: null,\n      code: '',\n      crop: {\n        aspect: 1 / 1\n      },\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n\n  componentDidMount() {\n    axios.get(url + ':' + port + '/getsession').then(res => {\n      this.setState({\n        code: res.data.code,\n        username: res.data.username,\n        avatar: res.data.avatar\n      });\n    });\n  }\n\n  render() {\n    const imgSrc = this.state.imgSrc;\n    const url_username = this.props.match.params.username;\n    return React.createElement(\"div\", {\n      className: \"container avatar-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.state.username && this.state.username == url_username ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      method: \"post\",\n      action: url + \":5000/uploadandcropavatar\",\n      target: \"targetIfr\",\n      encType: \"multipart/form-data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: this.fileInputRef,\n      type: \"file\",\n      name: \"image\",\n      accept: acceptedFileTypes,\n      multiple: false,\n      onChange: this.handleFileSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      readOnly: true,\n      name: \"x\",\n      value: this.state.crop.x,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      readOnly: true,\n      name: \"y\",\n      value: this.state.crop.y,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      readOnly: true,\n      name: \"width\",\n      value: this.state.crop.width,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      readOnly: true,\n      name: \"height\",\n      value: this.state.crop.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"iframe\", {\n      name: \"targetIfr\",\n      style: {\n        display: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(ReactCrop, {\n      src: imgSrc,\n      crop: this.state.crop,\n      onImageLoaded: this.handleImageLoaded,\n      onComplete: this.handleOnCropComplete,\n      onChange: this.handleOnCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Preview Canvas Crop \"), React.createElement(\"canvas\", {\n      ref: this.imagePreviewCanvasRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }))) : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Sorry, you need to \", React.createElement(NavLink, {\n      to: \"/signin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"sign in\"), \".\"));\n  }\n\n}\n\nexport default SetAvatar;","map":{"version":3,"sources":["/Users/peiwendu/Desktop/shuoshuo2.0/client/src/pages/SetAvatar.js"],"names":["React","axios","NavLink","ReactCrop","url","extractImageFileExtensionFromBase64","image64toCanvasRef","defaults","withCredentials","imageMaxSize","acceptedFileTypes","acceptedFileTypesArray","split","map","item","trim","SetAvatar","Component","constructor","props","verifyFile","files","length","currentFile","currentFileType","type","currentFileSize","size","alert","includes","handleImageLoaded","image","handleOnCropChange","crop","setState","handleOnCropComplete","pixelCrop","console","log","canvasRef","imagePreviewCanvasRef","current","imgSrc","state","handleFileSelect","event","target","isVerified","myFileItemReader","FileReader","addEventListener","myResult","result","imgSrcExt","readAsDataURL","createRef","fileInputRef","src","avatar","username","code","aspect","x","y","width","height","componentDidMount","get","port","then","res","data","render","url_username","match","params","display"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { NavLink } from 'react-router-dom';\nimport './pages.css';\nimport ReactCrop from 'react-image-crop';\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport { url } from '../url'\n\nimport {extractImageFileExtensionFromBase64,\n\timage64toCanvasRef} from '../base64'\naxios.defaults.withCredentials = true;\n\nconst imageMaxSize = 1000000000 // bytes\nconst acceptedFileTypes = 'image/x-png, image/png, image/jpg, image/jpeg, image/gif'\nconst acceptedFileTypesArray = acceptedFileTypes.split(\",\").map((item) => {return item.trim()})\nclass SetAvatar extends React.Component{\n\n\t\tconstructor(props){\n\t\t\tsuper(props)\n\t\t\tthis.imagePreviewCanvasRef = React.createRef()\n\t\t\tthis.fileInputRef = React.createRef()\t\n\t\t\tthis.state = {\n\t\t\t\t\timgSrc: null,\n\t\t\t\t\timgSrcExt: null,\n\t\t\t\t\tsrc: null,\n\t\t\t\t\tavatar: null,\n\t\t\t\t\tusername: null,\n\t\t\t\t\tcode:'',\n\t\t\t\t\tcrop: {\n\t\t\t\t\t\taspect: 1 / 1,\n\t\t\t\t\t},\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\twidth: 0,\n\t\t\t\t\theight: 0\n\t\t}\n\t }\n\n\t verifyFile = (files) => {\n\t\tif (files && files.length > 0){\n\t\t\t\tconst currentFile = files[0]\n\t\t\t\tconst currentFileType = currentFile.type\n\t\t\t\tconst currentFileSize = currentFile.size\n\t\t\t\tif(currentFileSize > imageMaxSize) {\n\t\t\t\t\t\talert(\"This file is not allowed. \" + currentFileSize + \" bytes is too large\")\n\t\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tif (!acceptedFileTypesArray.includes(currentFileType)){\n\t\t\t\t\t\talert(\"This file is not allowed. Only images are allowed.\")\n\t\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t}\n}\n\nhandleImageLoaded = (image) => {\n\t//console.log(image)\n}\nhandleOnCropChange = (crop) => {\n\tthis.setState({crop:crop})\n}\nhandleOnCropComplete = (crop, pixelCrop) =>{\n\tconsole.log(crop, pixelCrop)\n\tconst canvasRef = this.imagePreviewCanvasRef.current\n\tconst {imgSrc}  = this.state\n\timage64toCanvasRef(canvasRef, imgSrc, crop)\n}\n\nhandleFileSelect = event => {\n\t// console.log(event)\n\tconst files = event.target.files\n\tconsole.log(files);\n\tif (files && files.length > 0){\n\t\t\t\tconst isVerified = this.verifyFile(files)\n\t\t\t if (isVerified){\n\t\t\t\t\t // imageBase64Data \n\t\t\t\t\t const currentFile = files[0]\n\t\t\t\t\t const myFileItemReader = new FileReader()\n\t\t\t\t\t myFileItemReader.addEventListener(\"load\", ()=>{\n\t\t\t\t\t\t\t // console.log(myFileItemReader.result)\n\t\t\t\t\t\t\t const myResult = myFileItemReader.result\n\t\t\t\t\t\t\t this.setState({\n\t\t\t\t\t\t\t\t\t imgSrc: myResult,\n\t\t\t\t\t\t\t\t\t imgSrcExt: extractImageFileExtensionFromBase64(myResult)\n\t\t\t\t\t\t\t })\n\t\t\t\t\t }, false)\n\t\t\t\t\t myFileItemReader.readAsDataURL(currentFile)\n\t\t\t }\n\t}\n}\n\tcomponentDidMount(){ \n\t\taxios.get(url + ':' + port + '/getsession').then(res => {\n\t\t\tthis.setState({\n\t\t\t\tcode: res.data.code,\n\t\t\t\tusername: res.data.username,\n\t\t\t\tavatar: res.data.avatar\n\t\t\t})\n\t\t})\n\t}\n\n\trender(){\n\t\tconst {imgSrc} = this.state\n\t\tconst url_username = this.props.match.params.username;\n\t  \n\t\treturn (\n\t\t   \n\t\t\t<div className=\"container avatar-container\">\n\t\t\t\t{\n\t\t\t\t\tthis.state.username && this.state.username == url_username? \n\t\t\t\t\t<div>\n\t\t\t\t\t\t<form method=\"post\" \n\t\t\t\t\t\t\t\t\taction={url + \":5000/uploadandcropavatar\" }\n\t\t\t\t\t\t\t\t\ttarget=\"targetIfr\" \n\t\t\t\t\t\t\t\t\tencType=\"multipart/form-data\">\n\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t<input ref={this.fileInputRef} type='file' name=\"image\" accept={acceptedFileTypes} multiple={false} onChange={this.handleFileSelect} />\n\t\t\t\t\t\t\t  <input type=\"text\" readOnly name=\"x\" value={this.state.crop.x}/>\n\t\t\t\t\t\t\t\t<input type=\"text\" readOnly name=\"y\" value={this.state.crop.y}/>\n\t\t\t\t\t\t\t\t<input type=\"text\" readOnly name=\"width\" value={this.state.crop.width}/>\n\t\t\t\t\t\t\t\t<input type=\"text\" readOnly name=\"height\" value={this.state.crop.height}/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-default\" >Submit</button>\n\t\t\t\t\t\t  <iframe name=\"targetIfr\" style={{display:\"none\"}}></iframe> \n\t\t\t\t\t\t</form>\n\n        \t\t<br/>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t <ReactCrop\n                     src={imgSrc} \n                     crop={this.state.crop} \n                     onImageLoaded={this.handleImageLoaded}\n                     onComplete = {this.handleOnCropComplete}\n                     onChange={this.handleOnCropChange}/>\n\n                  <br/>\n                  <p>Preview Canvas Crop </p>\n                  <canvas ref={this.imagePreviewCanvasRef}></canvas>\n              </div>\n\t\t\t    </div>\n\t\t\t\t\t:<h1>Sorry, you need to <NavLink to=\"/signin\">sign in</NavLink>.</h1>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default SetAvatar;"]},"metadata":{},"sourceType":"module"}